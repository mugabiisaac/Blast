# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2017-01-12 16:20
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('countries', '0001_initial'),
        ('posts', '0001_initial'),
        ('tags', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(blank=True, max_length=30)),
                ('username', models.CharField(max_length=15, unique=True)),
                ('fullname', models.CharField(blank=True, max_length=50)),
                ('bio', models.CharField(blank=True, max_length=100)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=users.models.avatars_upload_dir)),
                ('website', models.CharField(blank=True, max_length=50)),
                ('is_private', models.BooleanField(default=False, help_text='Is user account in private mode?')),
                ('is_safe_mode', models.BooleanField(default=False)),
                ('save_original_content', models.BooleanField(default=True)),
                ('gender', models.IntegerField(blank=True, default=None, help_text='Use 1 for male and 0 for female', null=True)),
                ('birthday', models.DateTimeField(blank=True, default=None, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('popularity', models.FloatField(default=0)),
                ('search_range', models.SmallIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlockedUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Follower',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PinnedPosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pinners', to='posts.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pinned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pinned post',
                'verbose_name_plural': 'Pinned posts',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_my_blasts', models.BooleanField(default=True)),
                ('notify_upvoted_blasts', models.BooleanField(default=True)),
                ('notify_downvoted_blasts', models.BooleanField(default=True)),
                ('notify_pinned_blasts', models.BooleanField(default=True)),
                ('notify_votes', models.BooleanField(default=True)),
                ('notify_new_followers', models.IntegerField(choices=[(0, 'Off'), (1, 'People I follow'), (2, 'Everyone')], default=2)),
                ('notify_comments', models.IntegerField(choices=[(0, 'Off'), (1, 'People I follow'), (2, 'Everyone')], default=2)),
                ('notify_reblasts', models.IntegerField(choices=[(0, 'Off'), (1, 'People I follow'), (2, 'Everyone')], default=2)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='blocked',
            field=models.ManyToManyField(blank=True, related_name='blocked_users', through='users.BlockedUsers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='countries.Country'),
        ),
        migrations.AddField(
            model_name='user',
            name='friends',
            field=models.ManyToManyField(blank=True, related_name='related_friends', through='users.Follower', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='hidden_posts',
            field=models.ManyToManyField(blank=True, related_name='hidden_users', to='posts.Post'),
        ),
        migrations.AddField(
            model_name='user',
            name='pinned_posts',
            field=models.ManyToManyField(blank=True, related_name='pinned_users', through='users.PinnedPosts', to='posts.Post'),
        ),
        migrations.AddField(
            model_name='user',
            name='pinned_tags',
            field=models.ManyToManyField(blank=True, related_name='pinned_users', to='tags.Tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='follower',
            unique_together=set([('follower', 'followee')]),
        ),
        migrations.AlterUniqueTogether(
            name='blockedusers',
            unique_together=set([('user', 'blocked')]),
        ),
    ]
